<div>
    <div class="nette-inner">
        <div class="tracy-inner tracy-InfoPanel">
            <h1>StORM [<?= $this->name ?>] queries</h1>
                <table>
                    <thead>
                    <th>Query</th>
                    <th>Time and trace <a onclick="sort()">Sort</a></th>
                    <th>Vars</th>
                    </thead>
                    <tbody id="storm-queries">
                        <?php $i = 0; ?>
                        <?php foreach ($this->db->getLog() as $item): ?>
                        <tr style="<?= $this->db->getDebugThreshold() && $item->getTotalTime() > $this->db->getDebugThreshold() ? 'background-color: #FF7074;' : '' ?>"
                            data-totalTime="<?= $item->getTotalTime() ?>" data-orig="<?= $i ?>">
                            <td>
                                <span style="color: red;"><?= $item->hasError() ? '[ERROR!]':'' ?></span>
                                <?= $item->getSql() ?>
                                <p style="display: none;" id="item-<?= $i ?>"><?= htmlspecialchars(\PdoDebugger::show($item->getSql(), $item->getVars()), ENT_NOQUOTES) ?></p>
                                <a href="#" onclick='let copyText = document.getElementById("item-<?= $i ?>"); navigator.clipboard.writeText(copyText.textContent);'>[copy]</a>
                            </td>
                            <td><?= \round($item->getTotalTime(), 5) ?>s&nbsp;(<?= $item->getAmount() ?>x)<br><a onclick="toggle(<?= $i ?>)">Show trace</a> <div style="display: none;" id="toggle-<?= $i ?>"><?= $item->getLocation() ?></div></td>
                            <td><?= \Tracy\Debugger::dump($item->getVars(), true) ?></td>
                        </tr>
                        <?php $i++ ?>
                        <?php endforeach ?>
                    </tbody>
                </table>
        </div>
    </div>
</div>

<script>
    function toggle(id) {
        const element = document.getElementById("toggle-" + id)

        if (element.style.display === 'block') {
            element.style.display = 'none'
        } else {
            element.style.display = 'block'
        }
    }

    let sortDir = 0;

    function sort() {
        // Select the table body that contains the <tr> elements
        let tbody = document.querySelector('#storm-queries');

        // Convert the NodeList of <tr> elements to an array
        let rowsArray = Array.from(tbody.querySelectorAll('tr'));

        if (sortDir === 0) {
            rowsArray.sort((a, b) => {
                let totalTimeA = parseFloat(a.getAttribute('data-totalTime'));
                let totalTimeB = parseFloat(b.getAttribute('data-totalTime'));
                return totalTimeB - totalTimeA; // For descending order
            });

            sortDir = 1
        } else if (sortDir === 1) {
            rowsArray.sort((a, b) => {
                let totalTimeA = parseFloat(a.getAttribute('data-orig'));
                let totalTimeB = parseFloat(b.getAttribute('data-orig'));
                return totalTimeB - totalTimeA; // For descending order
            });

            sortDir = 0
        }

        // Append the sorted rows back to the tbody
        rowsArray.forEach(row => tbody.appendChild(row));
    }
</script>